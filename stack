#include<stdio.h>
#include<stdlib.h>
#define MAX 5
void printContent(int *stack,int top){
    for(int i=top;i>=0;i--)
        printf("%d ",stack[i]);
    printf("\n");
}
int push(int *top,int *stack){
    if(*top==MAX-1)    return 0;
    else{
        int ele;
        printf("Enter the element : ");
        scanf("%d",&ele);
        stack[++(*top)]=ele;
        return 1;
    }
}
int pop(int *top,int *stack){
    if(*top==-1)    return 0;
    else{
        (*top)--;
        return 1;
    }
}
int peek(int top,int *stack){
    if(top==-1){
        printf("Underflow: can't peek\n");
        return -1;
    }
    else    return(stack[top]);
}
int isFull(int top){
    if(top==MAX-1)    return 1;
    else    return 0;
}
int isEmpty(int top){
    if(top==-1) return 1;
    else    return 0;
}
int main(){
    int *stack,top=-1,ch,topelement;
    stack=(int*)malloc(MAX*sizeof(int));
    printf("Enter 1 to push element \n");
    printf("Enter 2 to pop element \n");
    printf("Enter 3 to peek top element \n");
    printf("Enter 4 to check stack is full or not \n");
    printf("Enter 5 to check stack is empty or not \n");
    printf("Enter 6 to exit \n");
    do{
        printf("Enter your choice \n");
        scanf("%d",&ch);
        switch(ch){
            case 1:
            if(push(&top,stack)){
                printf("Element successfully pushed \n");
                printf("Array content after pushing \n");
                printContent(stack,top);
            }
            else    printf("Overflow can't push \n");
            break;
            case 2:
            if(pop(&top,stack)){
                printf("Element successfully poped \n");
                printf("Array element after deletion from top \n");
                printContent(stack,top);
            }   
            else    printf("Underflow can't pop \n");
            break;
            case 3:
            topelement=peek(top,stack);
            if(topelement!=-1)  printf("Top element is = %d \n",topelement);
            break;
            case 4:
            if(isFull(top))   printf("Stack is Full \n");
            else    printf("Stack is not full \n");
            break;
            case 5:
            if(isEmpty(top))    printf("Stack is empty\n");
            else    printf("Stack is not empty\n");
            break;
            case 6: exit(0);
            default:
            printf("Invalid choice \n");
        }
    }while(ch!=6);
    free(stack);
    return 0;
}

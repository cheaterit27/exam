//BFS using List

#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;
typedef struct Queue {
    int items[MAX];
    int front, rear;
} Queue;
typedef struct Graph {
    int numVertices;
    Node** adjLists;
} Graph;
Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation error\n");
        exit(1);
    }
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    if (!graph) {
        printf("Memory allocation error\n");
        exit(1);
    }
    graph->numVertices = vertices;
    graph->adjLists = (Node**)malloc(vertices * sizeof(Node*));
    if (!graph->adjLists) {
        printf("Memory allocation error\n");
        exit(1);
    }
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}
void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}
int isEmpty(Queue* q) {
    return q->front == -1;
}
void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (q->front == -1)
        q->front = 0;
    q->items[++q->rear] = value;
}
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear) 
        q->front = q->rear = -1;
    else 
        q->front++;
    return value;
}
void BFS(Graph* graph, int startVertex) {
    int visited[MAX] = {0}; 
    Queue q;
    initQueue(&q);
    visited[startVertex] = 1;
    enqueue(&q, startVertex);
    printf("BFS Traversal: ");
    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        Node* temp = graph->adjLists[currentVertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                enqueue(&q, adjVertex);
            }
            temp = temp->next;
        }
    }
    printf("\n");
}
int main() {
    int vertices, edges, src, dest, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    Graph* graph = createGraph(vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);
    printf("Enter the edges (source and destination):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    BFS(graph, startVertex);
    return 0;
}

//BFS using Matrix

#include <stdio.h>
#include <stdlib.h>
#define MAX 100 
typedef struct Queue {
    int items[MAX];
    int front, rear;
} Queue;
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}
int isEmpty(Queue* q) {
    return q->front == -1;
}
void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (q->front == -1) 
        q->front = 0;
    q->items[++q->rear] = value;
}
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear)
        q->front = q->rear = -1; 
    else 
        q->front++;
    return value;
}
void BFS(int graph[MAX][MAX], int numVertices, int startVertex) {
    int visited[MAX] = {0}; 
    Queue q;
    initQueue(&q);
    visited[startVertex] = 1;
    enqueue(&q, startVertex);
    printf("BFS Traversal: ");
    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        for (int i = 0; i < numVertices; i++) 
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
    }
    printf("\n");
}
int main() {
    int graph[MAX][MAX], numVertices, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) 
        for (int j = 0; j < numVertices; j++) 
            scanf("%d", &graph[i][j]); 
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    BFS(graph, numVertices, startVertex);
    return 0;
}

//DFS using matrix

#include <stdio.h>
#include <stdlib.h>
#define MAX 100 
typedef struct Stack {
    int items[MAX];
    int top;
} Stack;
void initStack(Stack* stack) {
    stack->top = -1;
}
int isEmpty(Stack* stack) {
    return stack->top == -1;
}
void push(Stack* stack, int value) {
    if (stack->top == MAX - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack->items[++stack->top] = value;
}
int pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack->items[stack->top--];
}
void DFS(int graph[MAX][MAX], int numVertices, int startVertex) {
    int visited[MAX] = {0}; 
    Stack stack;
    initStack(&stack);
    push(&stack, startVertex);
    visited[startVertex] = 1;
    printf("DFS Traversal: ");
    while (!isEmpty(&stack)) {
        int currentVertex = pop(&stack);
        printf("%d ", currentVertex);
        for (int i = numVertices - 1; i >= 0; i--)  
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                push(&stack, i);
                visited[i] = 1;
            }
    }
    printf("\n");
}
int main() {
    int graph[MAX][MAX], numVertices, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) 
        for (int j = 0; j < numVertices; j++) 
            scanf("%d", &graph[i][j]);
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    DFS(graph, numVertices, startVertex);
    return 0;
}

//DFS using traversal

#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;
typedef struct Graph {
    int numVertices;
    Node** adjLists;
} Graph;
Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation error\n");
        exit(1);
    }
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    if (!graph) {
        printf("Memory allocation error\n");
        exit(1);
    }
    graph->numVertices = vertices;
    graph->adjLists = (Node**)malloc(vertices * sizeof(Node*));
    if (!graph->adjLists) {
        printf("Memory allocation error\n");
        exit(1);
    }
    for (int i = 0; i < vertices; i++) 
        graph->adjLists[i] = NULL;
    return graph;
}
void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
    newNode = createNode(src); 
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}
void DFSUtil(Graph* graph, int vertex, int* visited) {
    visited[vertex] = 1;
    printf("%d ", vertex);
    Node* adjList = graph->adjLists[vertex];
    while (adjList) {
        int adjVertex = adjList->vertex;
        if (!visited[adjVertex]) 
            DFSUtil(graph, adjVertex, visited);
        adjList = adjList->next;
    }
}
void DFS(Graph* graph, int startVertex) {
    int visited[MAX] = {0};  
    printf("DFS Traversal: ");
    DFSUtil(graph, startVertex, visited);
    printf("\n");
}
int main() {
    int vertices, edges, src, dest, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    Graph* graph = createGraph(vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);
    printf("Enter the edges (source and destination):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    DFS(graph, startVertex);
    return 0;
}

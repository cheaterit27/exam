#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define UNCLASSIFIED -1
#define NOISE -2

typedef struct {
    float x, y;
    int clusterId;
} Point;

float distance(Point a, Point b) {
    return sqrtf((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y));
}

int regionQuery(Point *points, int n, int index, float eps, int *neighbors) {
    int count = 0;
    for (int i = 0; i < n; i++) {
        if (distance(points[index], points[i]) <= eps) {
            neighbors[count++] = i;
        }
    }
    return count;
}

int expandCluster(Point *points, int n, int index, int clusterId, float eps, int minPts) {
    int neighbors[n];
    int neighborCount = regionQuery(points, n, index, eps, neighbors);

    if (neighborCount < minPts) {
        points[index].clusterId = NOISE;
        return 0;
    }

    points[index].clusterId = clusterId;

    for (int i = 0; i < neighborCount; i++) {
        int neighborIndex = neighbors[i];

        if (points[neighborIndex].clusterId == UNCLASSIFIED || points[neighborIndex].clusterId == NOISE) {
            points[neighborIndex].clusterId = clusterId;

            int subNeighbors[n];
            int subCount = regionQuery(points, n, neighborIndex, eps, subNeighbors);
            if (subCount >= minPts) {
                for (int j = 0; j < subCount; j++) {
                    neighbors[neighborCount++] = subNeighbors[j];
                }
            }
        }
    }
    return 1;
}

void dbscan(Point *points, int n, float eps, int minPts) {
    int clusterId = 0;
    for (int i = 0; i < n; i++) {
        if (points[i].clusterId == UNCLASSIFIED) {
            if (expandCluster(points, n, i, clusterId, eps, minPts)) {
                clusterId++;
            }
        }
    }
}

int main() {
    int n;
    float eps;
    int minPts;

    printf("Enter number of points: ");
    scanf("%d", &n);

    Point points[n];
    for (int i = 0; i < n; i++) {
        printf("Enter x y for point %d: ", i + 1);
        scanf("%f %f", &points[i].x, &points[i].y);
        points[i].clusterId = UNCLASSIFIED;
    }

    printf("Enter epsilon (eps): ");
    scanf("%f", &eps);
    printf("Enter minPts: ");
    scanf("%d", &minPts);

    dbscan(points, n, eps, minPts);

    printf("\nResults:\n");
    for (int i = 0; i < n; i++) {
        if (points[i].clusterId == NOISE)
            printf("Point (%.2f, %.2f) -> Noise\n", points[i].x, points[i].y);
        else
            printf("Point (%.2f, %.2f) -> Cluster %d\n", points[i].x, points[i].y, points[i].clusterId);
    }

    return 0;
}
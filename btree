#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left, *right;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}
struct Node* insert(struct Node* root, int data) {
    struct Node* newNode = createNode(data);
    if (root == NULL) 
        return newNode;
    struct Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;
    while (front < rear) {
        struct Node* temp = queue[front++];
        if (temp->left == NULL) {
            temp->left = newNode;
            break;
        } else {
            queue[rear++] = temp->left;
        }
        if (temp->right == NULL) {
            temp->right = newNode;
            break;
        } else {
            queue[rear++] = temp->right;
        }
    }
    return root;
}
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}
struct Node* findRightmost(struct Node* root) {
    while (root->right != NULL) 
        root = root->right;
    return root;
}
struct Node* deleteNode(struct Node* root, int data) {
    if (root == NULL) 
        return NULL;

    struct Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;
    struct Node *target = NULL, *last = NULL;
    while (front < rear) {
        last = queue[front++];
        if (last->data == data)
            target = last;
        if (last->left)
            queue[rear++] = last->left;
        if (last->right)
            queue[rear++] = last->right;
    }
    if (target != NULL) {
        target->data = last->data;
        front = 0, rear = 0;
        queue[rear++] = root;
        while (front < rear) {
            struct Node* temp = queue[front++];
            if (temp->left) {
                if (temp->left == last) {
                    temp->left = NULL;
                    break;
                } else {
                    queue[rear++] = temp->left;
                }
            }
            if (temp->right) {
                if (temp->right == last) {
                    temp->right = NULL;
                    break;
                } else {
                    queue[rear++] = temp->right;
                }
            }
        }
        free(last);
    }
    return root;
}
struct Node* search(struct Node* root, int data) {
    if (root == NULL) 
        return NULL;

    struct Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;

    while (front < rear) {
        struct Node* temp = queue[front++];
        if (temp->data == data)
            return temp;
        if (temp->left)
            queue[rear++] = temp->left;
        if (temp->right)
            queue[rear++] = temp->right;
    }
    return NULL;
}
int main() {
    struct Node* root = NULL;
    int choice, data;
    while (1) {
        printf("\nBinary Tree Operations:\n");
        printf("1. Insert\n");
        printf("2. Inorder Traversal\n");
        printf("3. Preorder Traversal\n");
        printf("4. Postorder Traversal\n");
        printf("5. Delete\n");
        printf("6. Search\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insert(root, data);
                break;
            case 2:
                printf("Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 3:
                printf("Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 4:
                printf("Postorder Traversal: ");
                postorder(root);
                printf("\n");
                break;
            case 5:
                printf("Enter data to delete: ");
                scanf("%d", &data);
                root = deleteNode(root, data);
                printf("Node deleted\n");
                break;
            case 6:
                printf("Enter data to search: ");
                scanf("%d", &data);
                struct Node* foundNode = search(root, data);
                if (foundNode != NULL)
                    printf("Node found with data: %d\n", foundNode->data);
                else
                    printf("Node not found\n");
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}

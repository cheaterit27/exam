//All sorting techniques ascending order

#include <stdio.h>
void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) 
        for (j = 0; j < n-i-1; j++) 
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}
void funnelSort(int arr[],int n){
    int i,j,temp,c=1;
    for (i = 0; i < n-1 && c!=0; i++) {
        c=0;
        for (j = 0; j < n-i-1; j++) 
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
                c=1;
            }
    }
}
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];  
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
void shellSort(int arr[], int n) {
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) 
                arr[j] = arr[j - gap];
            arr[j] = temp;
        }
    }
}
void selectionSort(int arr[], int n) {
    int i, j, minIndex, temp;
    for (i = 0; i < n-1; i++) {
        minIndex = i;
        for (j = i+1; j < n; j++) {
            if (arr[j] < arr[minIndex]) 
                minIndex = j;    
        }
        temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}
void merge(int arr[], int left, int mid, int right) {
    int i = left;        
    int j = mid + 1;    
    int k = 0;           
    int temp[right - left + 1];
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) temp[k++] = arr[i++];
        else    temp[k++] = arr[j++];
    }
    while (i <= mid)     temp[k++] = arr[i++];
    while (j <= right)   temp[k++] = arr[j++];
    for (i = left, k = 0; i <= right; i++, k++) 
        arr[i] = temp[k];
}
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}
int partition(int arr[], int low, int high) {
    int pivot = arr[low];  
    int i = low + 1;      
    for (int j = low + 1; j <= high; j++) {
        if (arr[j] < pivot) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++; 
        }
    }
    int temp = arr[low];
    arr[low] = arr[i - 1];
    arr[i - 1] = temp;
    return i - 1;  
}
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
int getMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) 
        if (arr[i] > max) 
            max = arr[i];   
    return max;
}
void countingSort(int arr[], int n, int exp) {
    int output[n];  
    int count[10] = {0}; 
    for (int i = 0; i < n; i++) 
        count[(arr[i] / exp) % 10]++;
    for (int i = 1; i < 10; i++) 
        count[i] += count[i - 1];
    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }
    for (int i = 0; i < n; i++) 
        arr[i] = output[i];
}
void radixSort(int arr[], int n) {
    int max = getMax(arr, n);
    for (int exp = 1; max / exp > 0; exp *= 10) 
        countingSort(arr, n, exp);   
}
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) 
        printf("%d ", arr[i]);
    printf("\n");
}
int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements of the array:\n", n);
    for (int i = 0; i < n; i++) 
        scanf("%d", &arr[i]);
    radixSort(arr,n);
    printf("Sorted array: ");
    printArray(arr, n);
    return 0;
}

//Searching Technique

#include <stdio.h>
int sentinelSearch(int arr[], int n, int key) {
    arr[n] = key;
    int i;
    for(i= 0 ;arr[i] != key; i++);
    if(i == n)  return -1;
    else return i;
}
int binarySearch(int arr[], int n, int key) {
    int left = 0;
    int right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == key)     return mid;  
        else if (arr[mid] < key)    left = mid + 1;
        else     right = mid - 1; 
    }
    return -1;  
}
int interpolationSearch(int arr[], int n, int key) {
    int low = 0;
    int high = n - 1;
    while (low <= high && key >= arr[low] && key <= arr[high]) {
        int pos = low + ((key - arr[low]) * (high - low) / (arr[high] - arr[low]));
        if (arr[pos] == key)     return pos;  
        if (arr[pos] < key)     low = pos + 1;    
        else     high = pos - 1;
    }
    return -1;  
}
int main() {
    int n, key;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n+1];
    printf("Enter %d elements of the array:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    printf("Enter the element to search for: ");
    scanf("%d", &key);
    int result = interpolationSearch(arr, n, key);
    if (result != -1)
        printf("Element %d found at index %d.\n", key, result);
    else 
        printf("Element %d not found in the array.\n", key);
    return 0;
}

//Search Sort Menu Driven

#include <stdio.h>
#include <stdlib.h>
void bubbleSort(int arr[], int n) {
    int i, j, temp, c = 1;
    for (i = 0; i < n - 1 && c != 0; i++) {
        c = 0;
        for (j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                c = 1;
            }
    }
}
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}
void selectionSort(int arr[], int n) {
    int i, j, minIndex, temp;
    for (i = 0; i < n - 1; i++) {
        minIndex = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex])
                minIndex = j;
        }
        temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}
int binarySearch(int arr[], int n, int key) {
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == key)
            return 1;
        else if (arr[mid] < key)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return 0;
}
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) 
        printf("%d ", arr[i]);
    printf("\n");
}
int main() {
    int n, choice, key, searchResult;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int *arr = (int *)malloc(n * sizeof(int));
    printf("Enter %d elements of the array:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    do{
        printf("Choose :\n1->Bubble Sort\n2->Insertion Sort\n3->Selection Sort\n4->Binary Search\n5->Exit\n");
        printf("Enter your choice : ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                bubbleSort(arr, n);
                printf("Sorted array using Bubble Sort: ");
                printArray(arr, n);
                break;
            case 2:
                insertionSort(arr, n);
                printf("Sorted array using Insertion Sort: ");
                printArray(arr, n);
                break;
            case 3:
                selectionSort(arr, n);
                printf("Sorted array using Selection Sort: ");
                printArray(arr, n);
                break;
            case 4:
                printf("Enter the key to search using Binary Search: ");
                scanf("%d", &key);
                if (binarySearch(arr,n,key))
                    printf("Element is present\n");
                else    printf("Element is not present\n");
                break;
            case 5: break;
            default:
                printf("Invalid choice!\n");
                break;
        }
    }while(choice!=5);
    free(arr);
    return 0;
}

// All sorting descending order

#include <stdio.h>
void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) 
        for (j = 0; j < n-i-1; j++) 
            if (arr[j] < arr[j+1]) {  
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}
void funnelSort(int arr[], int n) {
    int i, j, temp, c = 1;
    for (i = 0; i < n-1 && c != 0; i++) {
        c = 0;
        for (j = 0; j < n-i-1; j++) 
            if (arr[j] < arr[j+1]) {  
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
                c = 1;
            }
    }
}
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];  
        j = i - 1;
        while (j >= 0 && arr[j] < key) {  
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
void shellSort(int arr[], int n) {
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] < temp; j -= gap)  
                arr[j] = arr[j - gap];
            arr[j] = temp;
        }
    }
}
void selectionSort(int arr[], int n) {
    int i, j, maxIndex, temp;
    for (i = 0; i < n-1; i++) {
        maxIndex = i;
        for (j = i+1; j < n; j++) {
            if (arr[j] > arr[maxIndex])  
                maxIndex = j;    
        }
        temp = arr[maxIndex];
        arr[maxIndex] = arr[i];
        arr[i] = temp;
    }
}
void merge(int arr[], int left, int mid, int right) {
    int i = left;        
    int j = mid + 1;    
    int k = 0;           
    int temp[right - left + 1];
    while (i <= mid && j <= right) {
        if (arr[i] >= arr[j]) temp[k++] = arr[i++];  
        else    temp[k++] = arr[j++];
    }
    while (i <= mid)     temp[k++] = arr[i++];
    while (j <= right)   temp[k++] = arr[j++];
    for (i = left, k = 0; i <= right; i++, k++) 
        arr[i] = temp[k];
}
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}
int partition(int arr[], int low, int high) {
    int pivot = arr[low];  
    int i = low + 1;      
    for (int j = low + 1; j <= high; j++) {
        if (arr[j] > pivot) {  
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++; 
        }
    }
    int temp = arr[low];
    arr[low] = arr[i - 1];
    arr[i - 1] = temp;
    return i - 1;  
}
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
int getMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) 
        if (arr[i] > max) 
            max = arr[i];   
    return max;
}
void countingSort(int arr[], int n, int exp) {
    int output[n];  
    int count[10] = {0}; 
    for (int i = 0; i < n; i++) 
        count[(arr[i] / exp) % 10]++;
    for (int i = 1; i < 10; i++) 
        count[i] += count[i - 1];
    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }
    for (int i = 0; i < n; i++) 
        arr[i] = output[i];
}
void radixSort(int arr[], int n) {
    int max = getMax(arr, n);
    for (int exp = 1; max / exp > 0; exp *= 10) 
        countingSort(arr, n, exp);   
}
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) 
        printf("%d ", arr[i]);
    printf("\n");
}
int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements of the array:\n", n);
    for (int i = 0; i < n; i++) 
        scanf("%d", &arr[i]);
    radixSort(arr, n);  
    printf("Sorted array in descending order: ");
    printArray(arr, n);
    return 0;
}

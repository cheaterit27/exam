//All sorting techniques

#include <stdio.h>
void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) 
        for (j = 0; j < n-i-1; j++) 
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}
void funnelSort(int arr[],int n){
    int i,j,temp,c=1;
    for (i = 0; i < n-1 && c!=0; i++) {
        c=0;
        for (j = 0; j < n-i-1; j++) 
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
                c=1;
            }
    }
}
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];  
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
void shellSort(int arr[], int n) {
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) 
                arr[j] = arr[j - gap];
            arr[j] = temp;
        }
    }
}
void selectionSort(int arr[], int n) {
    int i, j, minIndex, temp;
    for (i = 0; i < n-1; i++) {
        minIndex = i;
        for (j = i+1; j < n; j++) {
            if (arr[j] < arr[minIndex]) 
                minIndex = j;    
        }
        temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}
void merge(int arr[], int left, int mid, int right) {
    int i = left;        
    int j = mid + 1;    
    int k = 0;           
    int temp[right - left + 1];
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) temp[k++] = arr[i++];
        else    temp[k++] = arr[j++];
    }
    while (i <= mid)     temp[k++] = arr[i++];
    while (j <= right)   temp[k++] = arr[j++];
    for (i = left, k = 0; i <= right; i++, k++) 
        arr[i] = temp[k];
}
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}
int partition(int arr[], int low, int high) {
    int pivot = arr[low];  
    int i = low + 1;      
    for (int j = low + 1; j <= high; j++) {
        if (arr[j] < pivot) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++; 
        }
    }
    int temp = arr[low];
    arr[low] = arr[i - 1];
    arr[i - 1] = temp;
    return i - 1;  
}
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
int getMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) 
        if (arr[i] > max) 
            max = arr[i];   
    return max;
}
void countingSort(int arr[], int n, int exp) {
    int output[n];  
    int count[10] = {0}; 
    for (int i = 0; i < n; i++) 
        count[(arr[i] / exp) % 10]++;
    for (int i = 1; i < 10; i++) 
        count[i] += count[i - 1];
    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }
    for (int i = 0; i < n; i++) 
        arr[i] = output[i];
}
void radixSort(int arr[], int n) {
    int max = getMax(arr, n);
    for (int exp = 1; max / exp > 0; exp *= 10) 
        countingSort(arr, n, exp);   
}
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) 
        printf("%d ", arr[i]);
    printf("\n");
}
int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements of the array:\n", n);
    for (int i = 0; i < n; i++) 
        scanf("%d", &arr[i]);
    radixSort(arr,n);
    printf("Sorted array: ");
    printArray(arr, n);
    return 0;
}

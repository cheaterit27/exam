//Identity and Diagonal

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
bool isIdentity(int **mat,int size){
    for(int i=0;i<size;i++)
        for(int j=0;j<size;j++)
            if((i==j&&mat[i][j]!=1)||(i!=j&&mat[i][j]!=0))
                return false;
    return true;
}
bool isDiagonal(int **mat,int size){
    for(int i=0;i<size;i++)
        for(int j=0;j<size;j++)
            if(i!=j&&mat[i][j]!=0)
                return false;
    return true;
}
int main(){
    int size,ch,y;
    bool flag,k;
    int **mat;
    printf("Enter the size of matrix : ");
    scanf("%d",&size);
    mat=(int**)malloc(size*sizeof(int*));
    for(int i=0;i<size;i++)
    mat[i]=(int*)malloc(size*sizeof(int));
    printf("Enter the elements of matrix \n");
    for(int i=0;i<size;i++)
        for(int j=0;j<size;j++)
            scanf("%d",&mat[i][j]);
    do{
        printf("Enter 1 to check matrix is identity or not \n");
        printf("Enter 2 to check matrix is diagonal or not \n");
        printf("Enter your choice : ");
        scanf("%d",&ch);
        switch(ch){
            case 1:
            flag=isIdentity(mat,size);
            if(flag)
                printf("Matrix is Identity \n");
            else
                printf("Matrix is not Identity \n");
            break;
            case 2:
            k=isDiagonal(mat,size);
            if(k)
                printf("Matrix is Diagonal \n");
            else
                printf("Matrix is not Diagonal \n");
            break;
            default :
            printf("Invalid Choice");
        }
        printf("If you want to continue then press 1 else any other number to exit : ");
        scanf("%d",&y);
    }while(y==1);
    return 0;
}


//MATRIX MULTIPLICATION

#include<stdio.h>
#include<stdlib.h>
void multiplication(int **mat1,int **mat2,int r1,int c1,int r2,int c2){
    if(c1!=r2){
        printf("Matrix multiplication not possible\n");
        return;
    }
    int **result=(int**)malloc(r1*sizeof(int*));
    for(int i=0;i<r1;i++)
    result[i]=(int*)malloc(c2*sizeof(int));
    for(int i=0;i<r1;i++)
        for(int j=0;j<c2;j++){
            result[i][j]=0;
            for(int k=0;k<c1;k++)
                result[i][j]+=mat1[i][k]*mat2[j][k];
        }
    printf("Matrix after multiplying is \n");
    for(int i=0;i<r1;i++){
        for(int j=0;j<c2;j++)
            printf("%d\t",result[i][j]);
        printf("\n");
    }
}
int main() {
    int r1,c1,r2,c2;
    printf("Enter row and column of first matrix : ");
    scanf("%d %d",&r1,&c1);
    printf("Enter row and column of second matrix : ");
    scanf("%d %d",&r2,&c2);
    int **mat1=(int**)malloc(r1*sizeof(int*));
    for(int i=0;i<r1;i++)
    mat1[i]=(int*)malloc(c1*sizeof(int));
    int **mat2=(int**)malloc(r2*sizeof(int*));
    for(int i=0;i<r2;i++)
    mat2[i]=(int*)malloc(c2*sizeof(int));
    printf("Enter elements of first matrix \n");
    for(int i=0;i<r1;i++)
        for(int j=0;j<c1;j++)
            scanf("%d",&mat1[i][j]);
    printf("Enter elements of second matrix \n");
    for(int i=0;i<r2;i++)
        for(int j=0;j<c2;j++)
            scanf("%d",&mat2[i][j]);
    multiplication(mat1,mat2,r1,c1,r2,c2);
    return 0;
}

//Polynomial

#include <stdio.h>
#include <stdlib.h>
void input_polynomial(int **poly,int *len){
    printf("Enter the degree of polynomial : ");
    scanf("%d",len);
    (*len)++;
    *poly=(int*)calloc(*len,sizeof(int));
    for(int i=0;i<*len;i++){
        printf("Enter the coefficient of x^%d: ",i);
        scanf("%d",&(*poly)[i]);
    }
}
void display_polynomial(int *poly,int len){
    int first=1;
    for(int i=0;i<len;i++){
        if(poly[i]!=0){
            if(!first)  printf("+");
            if(i==0)    printf("%d",poly[i]);
            else if(i==1)   printf("%dx",poly[i]);
            else    printf("%dx^%d",poly[i],i);
            first=0;
        }
    }
    if(first)   printf("0");
    printf("\n");
}
void add_polynomials(int *p1,int *p2,int len1,int len2,int **res,int *res_len){
    *res_len=len1>len2?len1:len2;
    *res=(int*)calloc(*res_len,sizeof(int));
    for(int i=0;i<*res_len;i++){
        if(i<len1)(*res)[i]+=p1[i];
        if(i<len2)(*res)[i]+=p2[i];
    }
}
void multiply_polynomials(int *p1,int *p2,int len1,int len2,int **res,int *res_len){
    *res_len=len1+len2-1;
    *res=(int*)calloc(*res_len,sizeof(int));
    for(int i=0;i<len1;i++)
        for(int j=0;j<len2;j++)
            (*res)[i+j]+=p1[i]*p2[j];
}
int main(){
    int *p1,*p2,len1,len2,*sum,*mul,sum_len,mul_len;
    printf("Enter the first polynomial\n");
    input_polynomial(&p1,&len1);
    printf("Enter the second polynomial\n");
    input_polynomial(&p2,&len2);
    printf("First polynomial is : ");
    display_polynomial(p1,len1);
    printf("Second polynomial is : ");
    display_polynomial(p2,len2);
    add_polynomials(p1,p2,len1,len2,&sum,&sum_len);
    printf("Addition of polynomials is : ");
    display_polynomial(sum,sum_len);
    multiply_polynomials(p1,p2,len1,len2,&mul,&mul_len);
    printf("Multiplication of polynomials is : ");
    display_polynomial(mul,mul_len);
    free(p1);free(p2);free(sum);free(mul);
    return 0;
}

//Sparse reprsentation

#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int row,col,value;
}sparse;
int main(){
    sparse s[1000];
    printf("Enter the row of matrix : ");
    scanf("%d",&s[0].row);
    printf("Enter the column of matrix : ");
    scanf("%d",&s[0].col);
    printf("Enter the elements of matrix \n");
    int m,k=1;
    for(int i=0;i<s[0].row;i++)
        for(int j=0;j<s[0].col;j++){
            scanf("%d",&m);
            if(m!=0){
                s[k].row=i;
                s[k].col=j;
                s[k++].value=m;
            }
        }
    s[0].value = --k;
    k=1;
    printf("Matrix is\n");
    for(int i=0;i<s[0].row;i++){
        for(int j=0;j<s[0].col;j++){
            if((s[k].row==i)&&(s[k].col==j))    printf("%d\t",s[k++].value);
            else    printf("%d\t",0);
        }
        printf("\n");
    }
    for(int i=0;i<=s[0].value;i++){
        int temp=s[i].row;
        s[i].row=s[i].col;
        s[i].col=temp;
    }
    for(int i=1;i<s[0].value;i++)
        for(int j=1;j<=s[0].value-i;j++)
            if((s[j].row>s[j+1].row)){
                sparse temp=s[j];
                s[j]=s[j+1];
                s[j+1]=temp;
            }
    printf("Transpose Matrix is\n");
    k=1;
    for(int i=0;i<s[0].row;i++){
        for(int j=0;j<s[0].col;j++){
            if((s[k].row==i)&&(s[k].col==j))    printf("%d\t",s[k++].value);
            else    printf("%d\t",0);
        }
        printf("\n");
    }
    return 0;
}

//Matrix addition using sparse

#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int row,col,value;
}sparse;
void input_matrix(sparse s[]){
    int m,k=1;
    for(int i=0;i<s[0].row;i++)
        for(int j=0;j<s[0].col;j++){
            scanf("%d",&m);
            if(m!=0){
                s[k].row=i;
                s[k].col=j;
                s[k++].value=m;
            }
        }
    s[0].value = --k;
}
void display_matrix(sparse s[]){
    int k=1;
    for(int i=0;i<s[0].row;i++){
        for(int j=0;j<s[0].col;j++){
            if((s[k].row==i)&&(s[k].col==j))    printf("%d\t",s[k++].value);
            else    printf("0\t");
        }
        printf("\n");
    }
    printf("\n");
}
void add_matrix(sparse s1[],sparse s2[],sparse s[]){
    s[0].row=s1[0].row;
    s[0].col=s2[0].col;
    int i=1,j=1,k=1;
    while((i<=s1[0].value)&&(j<=s2[0].value)){
        if((s1[i].row==s2[j].row)&&(s1[i].col==s2[j].col)){
            s[k].row=s1[i].row;
            s[k].col=s1[i].col;
            s[k++].value=s1[i++].value+s2[j++].value;
        }
        else if(s1[i].row<s2[j].row||((s1[i].row==s2[j].row)&&(s1[i].col < s2[j].col)))   
            s[k++]=s1[i++];
        else 
            s[k++]=s2[j++];
    }
    while (i <= s1[0].value) s[k++] = s1[i++];
    while (j <= s2[0].value) s[k++] = s2[j++];
}
int main(){
    sparse s[1000],s1[1000],s2[1000];
    printf("Enter the row of matrix 1 : ");
    scanf("%d",&s1[0].row);
    printf("Enter the column of matrix 1 : ");
    scanf("%d",&s1[0].col);
    printf("Enter the row of matrix 2 : ");
    scanf("%d",&s2[0].row);
    printf("Enter the column of matrix 2 : ");
    scanf("%d",&s2[0].col);
    printf("Enter the elements of matrix 1 \n");
    input_matrix(s1);
    printf("Enter the elements of matrix 2 \n");
    input_matrix(s2);
    printf("Matrix 1 is\n");
    display_matrix(s1);
    printf("Matrix 2 is\n");
    display_matrix(s2);
    if((s1[0].row==s2[0].row)&&(s1[0].col==s2[0].col)){
        add_matrix(s1,s2,s);
        printf("Addition of matrix is\n");
        display_matrix(s);
    }
    else    printf("Addition not possible\n");
    return 0;
}

//Hashing using linear chaining

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define TABLE_SIZE 10
typedef struct Node {
    int data;
    struct Node* next;
} Node;
Node* hashTable[TABLE_SIZE];
void initializeTable() {
    for (int i = 0; i < TABLE_SIZE; i++) 
        hashTable[i] = NULL;
}
int hashFunction(int key) {
    return key % TABLE_SIZE;
}
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void insert(int data) {
    int index = hashFunction(data);
    Node* newNode = createNode(data);
    if (hashTable[index] == NULL) 
        hashTable[index] = newNode;
    else {
        newNode->next = hashTable[index];
        hashTable[index] = newNode;
    }
    printf("Inserted %d at index %d\n", data, index);
}
int search(int data) {
    int index = hashFunction(data);
    Node* temp = hashTable[index];
    while (temp != NULL) {
        if (temp->data == data) 
            return 1; 
        temp = temp->next;
    }
    return 0; 
}
void displayTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        printf("Index %d: ", i);
        Node* temp = hashTable[i];
        while (temp != NULL) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}
void delete(int data) {
    int index = hashFunction(data);
    Node* temp = hashTable[index];
    Node* prev = NULL;
    while (temp != NULL && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Value %d not found\n", data);
        return;
    }
    if (prev == NULL)
        hashTable[index] = temp->next; 
    else 
        prev->next = temp->next;
    free(temp);
    printf("Deleted %d from index %d\n", data, index);
}
int main() {
    int choice, value;
    initializeTable();
    while (1) {
        printf("\nHash Table Operations:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Delete\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                printf("Enter value to search: ");
                scanf("%d", &value);
                if (search(value)) 
                    printf("Value %d found in the hash table\n", value);
                else 
                    printf("Value %d not found in the hash table\n", value);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                delete(value);
                break;
            case 4:
                displayTable();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}
